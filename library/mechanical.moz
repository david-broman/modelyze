/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/

include Physical


def Spring(c:Real, flangeA:Rotational, flangeB:Rotational) = {
    def tau:Torque;
    def relphi:Angle;
    Branch(tau,relphi,flangeB,flangeA);
    tau = c * relphi;
}

def Damper(d:Real, flangeA:Rotational, flangeB:Rotational) = {
    def tau:Torque;
    def relphi:Angle;
    Branch(tau,relphi,flangeB,flangeA);
    tau = d * der(relphi);
}

def Inertia(J:Real, flangeA:Rotational, flangeB:Rotational) = {
    def tauA:Torque;
    def tauB:Torque;
    def phiA:Angle;
    def phiB:Angle;
    def phi:Angle;
    def w:AngularVelocity;
    def a:AngularAcceleration;
    RefBranch(tauA,phiA,flangeA);
    RefBranch(-tauB,phiB,flangeB);
    phiA = phi;
    phiB = phi;
    w = der(phi);
    a = der(w);
    J * a = tauA - tauB;
}

def IdealGear(ratio:Real, flangeA:Rotational, flangeB:Rotational) = {
    def tauA:Torque;
    def tauB:Torque;
    def phiA:Angle;
    def phiB:Angle;
    RefBranch(tauA,phiA,flangeA);
    RefBranch(-tauB,phiB,flangeB);
    phiA = ratio * phiB;
    tauB = ratio * tauA;
}

def Fixed(angle:Real, flangeB:Rotational) = {
    def tau:Torque;
    RefBranch(tau,angle,flangeB);
}

def ConstantTorque(tau:Real, flangeB:Rotational) = {
    def phi:Angle;
    RefBranch(-tau,phi,flangeB);
}

def Torque(tau:Signal, flangeB:Rotational) = {
    def phi:Angle;
    RefBranch(-tau,phi,flangeB);
}

def TorqueSensor(flangeA:Rotational, flangeB:Rotational, tau:Signal) = {
    Branch(tau,0.0,flangeA,flangeB);
}

def AngleSensor(flangeB:Rotational,phi:Signal) = {
    RefBranch(0.0,phi,flangeB);
}

def SpeedSensor(flangeB:Rotational, w:Signal) = {
    def phi:Angle;
    RefBranch(0.0,phi,flangeB);
    w = der(phi);
}

def AccSensor(flangeB:Rotational, a:Signal) = {
    def phi:Angle;
    def w:AngularVelocity;
    RefBranch(0.0,phi,flangeB);
    w = der(phi);
    a = der(w);
}

def RelAngleSensor(flangeA:Rotational, flangeB:Rotational, phiRel:Signal) = {
    Branch(0.0,phiRel,flangeB,flangeA);
}

def RelSpeedSensor(flangeA:Rotational, flangeB:Rotational, w:Signal) = {
    def phiRel:Angle;
    Branch(0.0,phiRel,flangeB,flangeA);
    w = der(phiRel);
}

def RelAccSensor(flangeA:Rotational, flangeB:Rotational, a:Signal) = {
    def phiRel:Angle;
    def w:AngularVelocity;
    Branch(0.0,phiRel,flangeB,flangeA);
    w = der(phiRel);
    a = der(w);
}
