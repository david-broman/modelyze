/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/

include Equation
include IndexReduction
include SimOutput
include Numsolvers

type Residual = Real -> {Real} -> {Real} -> [Real]
type Vars = <Real> -> <Real>

// General expression evaluation
def eval(e:<Dyn>,yy:Vars,yp:Vars) -> Dyn = {
    match e with
    | der x -> 
        (match x with 
         | sym:Real -> eval(yp(x),yy,yp)  
         | _ -> error "Derivatives only allowed on unknowns")
    | sym:Real -> eval(yy(e),yy,yp)
    | f e -> (eval(f,yy,yp)) (eval(e,yy,yp))
    | sval v:Dyn -> v
    | _ ->  error "Unsupported construct" 
}

// Evaluate an expression of real type. The unknowns in the
// expression are looked up in yy and yp arrays.
def evalFromArrays(expr:Expr, ukmap:UkMap, yy:{Real}, yp:{Real}) -> Real = {
  def yyfun(s:Signal) -> Signal = {Array.get yy (fst(Map.find s ukmap))};
  def ypfun(s:Signal) -> Signal = {Array.get yp (fst (Map.find s ukmap))};
  eval(expr,yyfun,ypfun);
}

// Create the residual function of the DAE. Used by IDA/Sundials.
def makeResidual(ukmap:UkMap, model:Equations, ctime:Real, yy:{Real}, yp:{Real}) -> [Real] = {
  def realExpr(expr:Expr) = evalFromArrays(expr,ukmap,yy,yp);
  def traverseEq(m:Equations,acc:[Real]) -> [Real] = {
    match m with
    | e1 ; e2 -> traverseEq(e2,traverseEq(e1,acc))
    | e1 = e2 -> (realExpr(e1) - realExpr(e2))::acc
    | _ -> acc
  };
  traverseEq(model,[]);
}

//Generate arrays of initial values
def makeInitValues(model:Equations, ukmap:UkMap) -> ({Real},{Real}) = {
  def initvalmap = initValues(model);
  def size = (Map.size ukmap);
  def yy = (Array.make size 0.);
  def yp = (Array.make size 0.);
  def setvals(initvals:[(Signal,Signal)]) -> {Real} = {
    match initvals with
    | (u,e)::xs -> {
        def v = (match e with 
                 | sval v:Real -> v 
                 | _ -> error "Cannot initialize a variable with a variable.");
        def _ = (Array.set yy (fst (Map.find u ukmap)) v);
        setvals xs;
      }
    | [] -> yy
  };
  (setvals(Map.toList initvalmap), yp)
}


def initConditionCorrection(ukmap:UkMap) -> {Varid} = {
  def id = { Array.make (Map.size ukmap) DAE_VARID_ALGEBRAIC };
  def worker(uklist:[(Signal,(Int,Bool))]) -> {Varid} = {
    match uklist with
    | (u,(i,true))::us -> {
         def _ = (Array.set id i DAE_VARID_DIFFERENTIAL);
         worker us;
      }
    | _::us -> worker us
    | [] -> id
  };
  worker (Map.toList ukmap);
}


type Time = Real
type SolverState = ?
type VarArray = {Real}

type State = (SolverState, VarArray, VarArray, UkMap)

def daeInit(model:Equations) -> (State,ProbeMap) = {
    def (model1,probes) = elaborateProbes(model);
    def (model2,_) = elaborateDerivatives(model1,Map.empty);
    def (model3,dmap) = indexReducationPantelides(model2, Map.empty);
    def ukmap = makeUkMap(model3);
    def residual = peval (makeResidual(ukmap,model3));
    def (yy,yp) = makeInitValues(model3, ukmap);
    def id = initConditionCorrection(ukmap);
    def solverState = (DAESolver.init residual 0. yy yp);
    def _ = (DAESolver.calcIcYaYdp solverState id yy yp 0.00000001);
    ((solverState, yy, yp, ukmap), probes);
}


def daeDoStep(state: State, tnext: Time) -> (Time, SolverResult) = {
    def (solverState, yy, yp, _) = state;
    def (newtime,res) =
      (DAESolver.solveNormal solverState tnext yy yp);
    (newtime, res)
}


def daeGet(state:State, var:<Real>) -> Real = {
    def (_, yy, _, ukmap) = state;
    if Map.mem var ukmap then
       Array.get yy (fst(Map.find var ukmap))
    else
       INFINITE;
}

def daeSet(state:State, var:<Real>, value:Real) -> State = {
    state;
}

def daeGetAsStr(state:State, var:<Real>) -> String = {
    real2string(daeGet(state,var))
}


def ctSim(model:Equations, steptime:Real, endtime:Real) -> SimulationResult = {
  def (state, probes) = daeInit(model);
  def (solverState, yy, yp, ukmap) = state;
  def _ = (DAESolver.setStopTime solverState endtime);
  def probelist = (Map.toList probes);
  def stepval = (0., getProbeVals(probelist, daeGet(state)));

  def simloop(t: Time, acc: [StepVal]) -> [StepVal] = {
    def (tnew, res) = daeDoStep(state, t + steptime);
    def stepval = (tnew, getProbeVals(probelist, daeGet(state)));
    if res == DAE_SOLVER_RESULT_STOP_TIME_REACHED then acc
    else simloop(tnew, stepval::acc)
  };
  (makeProbeNames("",probelist), reverse(simloop(0.,[stepval])))
}


def printsim(model:Equations, steptime:Real, endtime:Real) =
    print(pprintSimulation(ctSim(model,steptime,endtime)))
