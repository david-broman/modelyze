/*
Modeling Kernel Language (Modelyze) library
Copyright (C) 2010-2012 David Broman

Modelyze library is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Modelyze library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with Modelyze library.  If not, see <http://www.gnu.org/licenses/>.
*/

include HybridModeling
include ModelyzeDAE
include SimOutput

// Transition ID. Used for safe zero-crossing detection
type TransId

// List definition of transistions
type Transitions = [(TransId,Mode,Mode,Expr,Expr)]

type Modes = Set Mode


// Internal transition for storing both source and target mode info
def internalTrans : <TransId -> Mode -> Mode -> Bool -> Equations -> Equations>

def epsilon = 1e-9


// newModes = Set of new modes that should be active
// activeCharts = Set of default modes for all active charts
// updatedNew =  Updated of all new modes (if new modes are discovered)
// updatedActive = Updated of all default modes (if new modes are discovered)
//
def extractHMode(model:Equations, newModes:Modes, activeCharts:Modes, curr:Mode) ->
                (Equations,Modes,Modes) = {
    match model with
    | hybridchart initmode s e ->
        if Set.mem s activeCharts
        then extractHMode(e, newModes, activeCharts, curr)
        else extractHMode(e, Set.add s newModes, Set.add s activeCharts, curr)
    | mode s e ->
        if Set.mem s newModes
        then extractHMode(e,newModes,activeCharts, s)
        else (NoEqn,newModes,activeCharts)
    | transition nmode when g action i -> {
          def newId:TransId;
          (internalTrans newId curr nmode g i,newModes,activeCharts)
          }
    | e1 ; e2 -> { 
         def (eqs1,new1,active1) = extractHMode(e1,newModes,activeCharts, curr);
         def (eqs2,new2,active2) = extractHMode(e2,new1,active1, curr);
         (eqs1 ; eqs2,new2,active2);
      }
    | e -> (e,newModes,activeCharts)
}

// Extract a list of transitions from an equation system.
def extractTransitions(model:Expr) -> Transitions = {
  def extract(e:Expr, acc:Transitions) -> Transitions = {
    match e with
    | internalTrans id s1 s2 g i -> (id,s1,s2,g,i)::acc
    | e1 e2 -> extract(e2,extract(e1,acc))
    | _ -> acc
  };
  extract(model,[])
}


// Extract value maps from arrays of real values for unknowns.
// The function is used to when performing structural discrete changes
// and transferring the mode during the event.
def makePreValMap(yy:{Real}, yp:{Real}, ukmap:UkMap) -> (InitValMap,InitValMap) = {
  def worker(lst:UkList, yymap:InitValMap, ypmap:InitValMap) -> (InitValMap,InitValMap) = {
    match lst with
    | (u,(i,_))::xs ->
         worker(xs, Map.add u (Array.get yy i) yymap, Map.add u (Array.get yp i) ypmap)
    | [] -> (yymap,ypmap)
  };
  worker(Map.toList ukmap, Map.empty, Map.empty);
}


// Evaluate an expression of real type. The unknowns in the
// expression are looked up using initvalue maps.
def evalFromMap(expr:Expr, valmap:InitValMap) -> Real = {
  def yyfun(s:Signal) -> Signal = (Map.find s valmap);
  def ypfun(s:Signal) -> Signal = (Map.find (der s) valmap);
  eval(expr,yyfun,ypfun)
}


// Evaluate an expression of real type. The unknowns in the
// expression are looked up in yy and yp arrays.
// Redefines the evalFromArrays in ModelyzeDAE
def evalFromArrays(use_epsilon:Bool, expr:Expr, ukmap:UkMap,
                  yy:{Real}, yp:{Real}) -> Real = {
  def yyfun(s:Signal) -> Signal = {Array.get yy (fst(Map.find s ukmap))};
  def yyfun_epsilon(s:Signal) -> Signal = {
      if (Array.get yp (fst (Map.find s ukmap))) > 0. then
        (Array.get yy (fst(Map.find s ukmap))) + epsilon
      else
        (Array.get yy (fst(Map.find s ukmap))) - epsilon
  };
  def ypfun(s:Signal) -> Signal = {Array.get yp (fst (Map.find s ukmap))};
  eval(expr, if use_epsilon then yyfun_epsilon else yyfun, ypfun);
}


// Evaluate an expression that is assumed to have type Bool.
def evalBoolFromArray(expr:Expr, yy:{Real}, yp:{Real}, ukmap:UkMap) -> Bool = {
  def evalReal(expr:Expr) -> Real = evalFromArrays(true,expr,ukmap,yy,yp);
  def evalBool(expr:Expr) -> Bool = {
    match expr with
    | e1 == e2 -> error "Not allowed to compare for equality in transitions."
    | e1 != e2 -> error "Not allowed to compare for equality in transitions."
    | e1 >= e2 -> evalReal(e1) >  evalReal(e2)
    | e1 >  e2 -> evalReal(e1) >  evalReal(e2)
    | e1 <= e2 -> evalReal(e1) <  evalReal(e2)
    | e1 <  e2 -> evalReal(e1) <  evalReal(e2)
    | !e1 -> !(evalBool(e1))
    | e1 && e2 -> evalBool(e1) && evalBool(e2)
    | e1 || e2 -> evalBool(e1) || evalBool(e2)
    | sval b:Bool -> b
    | _ -> error "The value is not a boolean type."
  };
  evalBool(expr);
}


// Create the function that is used by IDA/Sundials for root finding
// (detecting zero-crossings). The root function is created by
// evaluating the transitions that are extracted from the original
// equation system.
def makeRootFun(ukmap:UkMap, trans:Transitions, ctime:Real, yy:{Real}, yp:{Real}) -> [Real] = { 
  def travGuard(e:Expr,acc:[Real]) -> [Real] = {
    match e with
    | e1 == e2 -> error "Operator == is not allowed in a transition guard."
    | e1 != e2 -> error "Operator != is not allowed in a transition guard."
    | e1 >= e2 -> evalFromArrays(false,e1-e2,ukmap,yy,yp)::acc
    | e1 > e2 -> evalFromArrays(false,e1-e2,ukmap,yy,yp)::acc
    | e1 <= e2 -> evalFromArrays(false,e1-e2,ukmap,yy,yp)::acc
    | e1 < e2 -> evalFromArrays(false,e1-e2,ukmap,yy,yp)::acc
    | !e1 -> travGuard(e,acc)
    | e1 && e2 -> travGuard(e2,travGuard(e1,acc))
    | e1 || e2 -> travGuard(e2,travGuard(e1,acc))
    | sval b:Bool -> acc
    | _ -> error "Illegal expression in transition guard."
  };
  def travTrans(trans:Transitions, acc:[Real]) -> [Real] = {
    match trans with
     | (_,_,_,g,_)::ts -> travTrans ts (travGuard g acc)
     | [] -> acc
  };
  travTrans(trans,[]);
}

// Returns a tuple with the index of the searched root and a boolean stating
// true if the transition is fired.
def isTransitionFired(expr:Expr, roots:{Int}, index:Int) -> (Int,Bool) = {
  def fired(e:Expr, i:Int) -> (Int,Bool) = {
    match e with
    | e1 == e2 -> (i - 1,(Array.get roots i) != 0)
    | e1 != e2 -> (i - 1,(Array.get roots i) != 0)
    | e1 >= e2 -> (i - 1,(Array.get roots i) != 0)
    | e1 > e2  -> (i - 1,(Array.get roots i) != 0)
    | e1 <= e2 -> (i - 1,(Array.get roots i) != 0)
    | e1 < e2 ->  (i - 1,(Array.get roots i) != 0)
    | !e1 -> fired e1 i
    | e1 && e2  -> {
         def (i1,f1) = fired(e1,i);
         def (i2,f2) = fired(e2,i1);
         (i2,f1||f2)
       }
    | e1 || e2  -> {
         def (i1,f1) = fired(e1,i);
         def (i2,f2) = fired(e2,i1);
         (i2,f1||f2)
      }
    | sval b:Bool -> (i,false)
    | _ -> error "Error in term"
  };
  fired(expr,index);
}

// Create a list of expressions containing initiatiations that should
// be executed when an event (transistion occurs). The function takes
// as input the current mode path and the mode path that should exists
// after transition.
def makeEventActions(daesolv:DAESolver, trans:Transitions, newModes:Modes,
      ukmap:UkMap, yy:{Real}, yp:{Real}) -> ([Expr],Modes) = {
  def roots = (DAESolver.getRootInfo daesolv);
  def travTrans(trans:Transitions, acc:[Expr], newModes:Modes, idx:Int) -> ([Expr],Modes) = {
    match trans with
     | (id,s1,s2,g,i)::ts -> 
          def (i2,fired) = isTransitionFired(g,roots,idx);
          if fired && evalBoolFromArray(g,yy,yp,ukmap)
            then travTrans(ts,i::acc,Set.add s2 (Set.remove s1 newModes),i2)
            else travTrans(ts,acc,newModes,i2)
     | [] -> (acc,newModes)
  };
  if (Array.length roots) != 0 then
    travTrans(trans,[],newModes,(Array.length roots) - 1)
  else
    ([],newModes)
}

// Extend an equation system with a list of new equations
//def addEquations(inits:[Equations], eqs:Equations) -> Equations = {
//  match inits with
//  | e::es -> addEquations(es, eqs;e)
//  | [] -> eqs
//}

def addTransinits(yymap:InitValMap, inits:[Equations], yy:{Real}, yp:{Real}, ukmap:UkMap)
                  -> InitValMap = {
    def addInitVals(vals:InitValList, acc:InitValMap) -> InitValMap = {
        match vals with
        | (x,e)::ss -> {
              def v = evalFromArrays(true, e, ukmap, yy, yp);
              addInitVals(ss,Map.add x v acc);
          }
        | [] -> acc
    };
    match inits with
    | e::es -> addTransinits(addInitVals(Map.toList (initValues(e)),yymap),es, yy, yp, ukmap)
  | [] -> yymap
}

// Generate arrays of initial values from init value map and old
// mode information
def makeInitModeArrays(initvals:InitValMap, yymap:InitValMap, ypmap:InitValMap,
                       ukmap:UkMap) -> ({Real},{Real}) = {
  def size = (Map.size ukmap);
  def yy = (Array.make size 0.);
  def yp = (Array.make size 0.);
  def setvals(initvals:[(Signal,Signal)],  arr:{Real}) -> () = {
    match initvals with
    | (u,e)::xs -> {
         def v = evalFromMap(e,yymap);
         def _ = (if Map.mem u ukmap then
                    Array.set arr (fst (Map.find u ukmap)) v
                 else ());
         setvals(xs,arr);
       }
    | [] -> ()
  };
  def _ = setvals(Map.toList initvals, yy);
  def _ = setvals(Map.toList yymap, yy);
  def _ = setvals(Map.toList ypmap, yp);
  (yy, yp);
}


// Generate the identity array specifying if a variable
// appears differentiated or not. The array is used by
// IDA/Sundials for initial condition correction
def initConditionCorrection(ukmap:UkMap) -> {Real} = {
  def id = (Array.make (Map.size ukmap) 0.);
  def worker(uklist:[(Signal,(Int,Bool))]) -> {Real} = {
    match uklist with
    | (u,(i,true))::us -> {
        def _ = (Array.set id i 1.0);
        worker us;
      }
    | _::us -> worker us
    | [] -> id
  };
  worker(Map.toList ukmap)
}


// The main simulation function. Performs hybrid simulation using
// hierarical mode machines and differential-algebraic equations
def simulate(model:Equations, steptime:Real, endtime:Real,
             probes:ProbeMap) -> SimulationResult = {

  def probelist = (Map.toList probes);

  // **** Start of discrete-time loop. ****
  //    Iterate for each mode change
  def dtloop(currtime:Real, acc:[StepVal], model1:Equations, yymap:InitValMap,
             ypmap:InitValMap, olddmap:DerivMap,
             newModes:Modes, activeCharts:Modes) -> [StepVal] = {

    // Extract all equations and correct inits for a partiuclar mode path.
    // But, keep transitions, since these can contain equations in the action
    def (model2,newModes2,activeCharts2) = extractHMode(model1,newModes,activeCharts,topmode);

    // Elaborate derivatives, e.g., get rid of higher-order deriviatives.
    def (model3,newdmap) = elaborateDerivatives(model2,olddmap);

    // Peforme index reduction

    def (model3,newdmap) = indexReducationPantelides(model3,Map.empty);



    // Extract transitions
    def transitions = extractTransitions(model3);

    // Create a map of unknowns to unique integer values
    def ukmap = makeUkMap(model3);

    // Create the DAE residual
    def residual = peval (makeResidual(ukmap,model3));

    // Create a map with all initial values for the current state
    def initvalmap = initValues(model3);

    // Create the actual value arrays used in simulation mode
    def (yy,yp) = makeInitModeArrays(initvalmap,yymap,ypmap,ukmap);

    // Auto correct initial conditions of the DAE
    def id = initConditionCorrection(ukmap);

    // Create the root function for detecting zero crossings
    def rootfun = (specialize (makeRootFun ukmap) transitions);

    // Count the number of roots
    def nroots = length (rootfun 0. yy yp);

    // Create the simulation instance for continuous-time simulation using IDA
    // def mode = (DAESolver.makehybrid currtime yy yp id residual rootfun);
    def mode = (DAESolver.initWithRootf residual nroots rootfun currtime yy yp);

    // Set simulaiton stop time
    // def _ = (DAESolver.setStopTime endtime);

    // Calculate consistent initial values
    def dt = 0.00001;
    def _ = (DAESolver.calcIcYaYdp mode id yy yp (currtime + dt));

    // Return the init values after an event or start of simulation (time 0)
    def firststepval = makeStepVal(currtime,yy,probelist,ukmap);

    // **** Start of continuous-time loop *****
    def ctloop(currtime:Real, acc:[StepVal]) -> ([StepVal],Real,[Expr], Modes) = {
        if currtime > endtime then
            (acc,currtime,[],newModes2)
        else {
            // Compute the next step using numerical integration
            def (newtime, _) = (DAESolver.solveNormal mode (currtime + steptime) yy yp);
            // Save the step value
            def stepval = makeStepVal(newtime,yy,probelist,ukmap);
            // Check if there are event actions
            def (transInits,newModes3) =
                makeEventActions(mode,transitions,newModes2,ukmap,yy,yp);

            // End continuous-time loop?
            if newtime == 0. ||   !(transInits <==> [])
               then (stepval::acc,newtime,transInits,newModes3)
               else ctloop(newtime + steptime, stepval::acc)
        };
    };
      // Post processing after continuous-time simulation
      def (acc2,newtime,transInits,newModes) = ctloop(currtime, firststepval::acc);

      // Close the continuous-time DAE solver instance.
      // def _ = (DAESolver.close mode);

      // Perform another round of CT simulation?
      if newtime > endtime then
          acc2
      else {
         def (yymap,ypmap) = makePreValMap yy yp ukmap;
         def yymap2 = addTransinits(yymap, transInits, yy, yp, ukmap);
         dtloop(newtime,acc2,model1,yymap2,ypmap,newdmap,newModes,activeCharts2);
      };
  };
    // Initiate the hybrid simulation loop (CT + DT)
    def result = dtloop(0.,[],model,Map.empty,Map.empty,Map.empty,Set.empty,Set.empty);
    (reverse(makeProbeNames("",probelist)), reverse(result))
}

// Utility function to both simulate and pretty-print the result
def printsim(model:Equations, steptime:Real, endtime:Real) -> () = {
    // Extract probes
    def (model1,probes) = elaborateProbes(model);

    // Simulate and print result
    print(pprintSimulation(simulate(model1,steptime,endtime,probes)));
}
