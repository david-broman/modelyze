/*
 * Tests implementation of furuta pendulum attached to the end of an robotic arm
 */
include ModelyzeEOO

def g = 9.81
def PI = 3.1415

// arm parameters
def Link1Length = 0.2
def Link2Length = 0.5


def getArm1Params(Larm : Real) = {
  // Provide the length of the link of the first arm and it will return modeling parameters
  // assumes an DCX26L joint and Broman(tm) pendulum joint
  
  //def Lmot = 0.0455; def mmot = 0.853; def Jmot = 0.042; // DCX26L
  def Lmot = 0.036; def mmot = 0.5; def Jmot = 0.05; // DCX22L
  def marm = 0.4167*Larm; def Jarm = 0.0368*Larm*Larm*Larm;
  def Lconn = 0.028; def mconn = 0.175; def Jconn = 3e-5;
  def l1 =((Lmot + 0.5*Larm)*marm + (Lmot + Larm + Lconn)*mconn)/(mmot+marm+mconn);
  def l2 = Lmot + Larm/2.0 - l1;
  def l3 = Lmot + Larm + Lconn - l1;
  
  def L1 = Lmot + Larm + Lconn;
  def m1 = mmot + marm + mconn;
  def L1m = l1;
  def J1 = Jmot + mmot*l1*l1 + Jarm + marm*l2*l2 + Jconn + mconn*l3*l3;
  
  //def _ = println("L1 = " ++ real2string(L1) ++ "; l1 = " ++ real2string(L1m) ++ "; m1 = " ++ real2string(m1) ++ "; J1zz = " ++ real2string(J1) ++ ";");
  
  (L1,L1m,m1,J1)  
}

def getPendParams(Lpend : Real) = {
  // Provide the length of the link of the pendulum and it will calculate
  // modeling parameters
  def Lconn = 0.033; def mconn = 0.035; 
  def Jcxx = 0.0; def Jcyy = 0.0; def Jczz = 0.0;
  def mpend = 0.4167*Lpend; def Jpxx = 3.69e-5*Lpend; 
  def Jpyy = 0.0368*Lpend*Lpend*Lpend; def Jpzz = Jpyy;
  // end-weights on pendulum
  def Lw = 0.0; def mw = 0.0;
  def Jwxx = 0.0; def Jwyy = 0.0; def Jwzz = 0.0;
//   def Lw = 0.01888; def mw = 0.162;
//   def Jwxx = 7.2674e-5; def Jwyy = 6.622e-5; def Jwzz = 3.3478e-5;
  
  def l1 = ((Lpend/2.0 + Lconn)*mpend + (Lconn+Lpend+Lw)*mw)/(mconn+mpend+mw);
  def l2 = l1 - (Lpend/2.0 + Lconn);
  def l3 = Lconn + Lpend + Lw - l1;
  
  def L2 = Lconn + Lpend + Lw;
  def m2 = mconn + mpend + mw;
  def L2m = l1;
  def Jxx = Jcxx + Jpxx + Jwxx;
  def Jyy = Jpyy + mpend*l2*l2 + Jcyy + mconn*l1*l1 + Jwyy + mw*l3*l3;
  def Jzz = Jpzz + mpend*l2*l2 + Jczz + mconn*l1*l1 + Jwzz + mw*l3*l3;
  
  //def _ = println("L2 = " ++ real2string(L2) ++ "; l2 = " ++ real2string(L2m) ++ "; m2 = " ++ real2string(m2) ++ "; J2xx = " ++ real2string(Jxx) ++ "; J2yy = " ++ real2string(Jyy) ++ "; J2zz = " ++ real2string(Jzz) ++ ";");
  
  (L2,L2m,m2,Jxx,Jyy,Jzz)  
}

def getMotorParams() = {
  // dc-motor parameters (DCX26L 150)
//   def K = 0.0214; def R = 0.74+0.33; def L = 0.129e-3; 
//   def n = 150.0; def eta = 0.75;
  
  // dc-motor parameters (DCX22L 232)
  def K = 0.0229; def R = 1.83+0.33; def L = 0.192e-3; 
  def n = 300564.0/1300.0; def eta = 0.74;
  
  (K,R,L,n,eta)
}

def FurutaEquations(tau1 : Signal, tau2 : Signal, th1 : Signal, th2 : Signal) = {
  // uses the equations found here:
  // https://en.wikipedia.org/wiki/Furuta_pendulum
  
  
  def (L1, L1m, m1, J1zz) = getArm1Params(Link1Length);
  def (L2, L2m, m2, J2xx, J2yy, J2zz) = getPendParams(Link2Length);
  def b1 = 0.005; def b2 = 0.002; // viscuous damping friction coeffs
  
  // Main pendulum equations
  th1''*(J1zz + m1*L1m*L1m + m2*L1*L1 + (J2yy+m2*L2m*L2m)*sin(th2)*sin(th2) + J2xx*cos(th2)*cos(th2)) + th2''*m2*L1*L2m*cos(th2) - m2*L1*L2m*sin(th2)*th2'*th2' + th1'*th2'*sin(2.0*th2)*(m2*L2m*L2m+J2yy-J2xx) + b1*th1' = tau1;
  th1''*m2*L1*L2m*cos(th2) + th2''*(m2*L2m*L2m+J2zz) + 0.5*th1'*th1'*sin(2.0*th2)*(-m2*L2m*L2m-J2yy+J2xx) + b2*th2' + g*m2*L2m*sin(th2) = tau2;
  
  probe("th_1") = th1;
  probe("th_2") = th2;
}

def PIspeedController(ref : Signal, meas : Signal, uout : Signal) -> Equations = {
  // Output feedback PI controller with LP-filter
  
  // speed feedback control parameters
  def s1 = 161.108; def s0 = 8316.540; def t2 = 3.121;
  def t1 = 322.215; def t0 = 8316.540; def r0 = 101.621;
//   def s1  = 0.0;  def s0 = 0.0; def t2 = 0.0;
//   def t1 = 0.0; def t0 = 0.0; def r0 = 0.0;
  
  // eqs
  def ufb, uff : Signal;
  ufb'' + r0*ufb' = s1*meas' + s0*meas;
  uff'' + r0*uff' = t2*ref'' + t1*ref' + t0*ref;
  uout = uff - ufb;
}

def PrintFurutaParams() = {
  def (L1, L1m, m1, J1zz) = getArm1Params(Link1Length);
  def (L2, L2m, m2, J2xx, J2yy, J2zz) = getPendParams(Link2Length);
  def b1 = 0.005; def b2 = 0.002; // viscuous damping friction coeffs
  def _ = println("L1 = " ++ real2string(L1) ++ "; l1 = " ++ real2string(L1m) ++ "; m1 = " ++ real2string(m1) ++ "; J1zz = " ++ real2string(J1zz) ++ ";");
  def __ = println("L2 = " ++ real2string(L2) ++ "; l2 = " ++ real2string(L2m) ++ "; m2 = " ++ real2string(m2) ++ "; J2xx = " ++ real2string(J2xx) ++ "; J2yy = " ++ real2string(J2yy) ++ "; J2zz = " ++ real2string(J2zz) ++ ";"); 
  
  def tau1, tau2, th1, th2 : Real;
  tau1 = 0.0; tau2 = 0.0;
  FurutaEquations(tau1,tau2,th1,th2);
  probe("l1") = L1m;
  
}
def furutaFree(th2init : Real) = {
  def tau1 : Real; // main actuator torque
  def tau2 : Real; // Arm disturbance torque
  def th1 : Real; // Angle of first arm
  def th2 : Real; // Angle of pendulum (0 = straight down)
  init th2 th2init; // init angle of pendulum
  tau1 = 0.0;
  tau2 = 0.0;
  // Equations
  FurutaEquations(tau1,tau2,th1,th2);
}
def furutaSpeedCascFeedback(Pth : Real, Ith : Real, Dth : Real, Ps : Real, Ds : Real) = {  
  
  def (K,R,L,n,eta) = getMotorParams();

  // working variables
  def u,i : Real;	// dc-motor voltage (main input)
  def refVel : Real;   // Velocity reference
  def refTh : Real; def errTh : Real; def IerrTh : Real;
  def refS : Real; def errS : Real; // Speed control of arm1
  def tau1 : Real; // main actuator torque
  def tau2 : Real; // Arm disturbance torque
  def th1 : Real; // Angle of first arm
  def th2 : Real; // Angle of pendulum (0 = straight down)
  def time : Real;
  
  def th2init = 0.9*PI;
  def th2refinit = 1.0*PI;
  
  init th2 th2init; // init angle of pendulum
  init refTh (th2refinit);
  init errTh (th2refinit - th2init);
  init refVel (Pth*(th2refinit - th2init));
  
  
  // Time
  time' = 1.0;
  
  // Disturbance torque
  tau2 = 0.0;    
  
  // angular speed control of arm1 using refTh as input
  refS = 0.0;
  errS = (th1-refS);
  refTh = Ps*errS + Ds*errS' + PI;
  
  // pendulum angle control using refVel as input
  //refTh = th2refinit;
  errTh = (refTh - th2);
  IerrTh' = errTh;
  refVel = Pth*errTh + Ith*IerrTh + Dth*errTh';

  // dc-motor input/controller
  //refVel = refVelArm + refVelPend;
  PIspeedController(refVel,th1',u);
  
  // dc-motor equations
  u - R*i - L*i' - K*n*th1' = 0.0;
  tau1 = eta*K*n*i;
  
  FurutaEquations(tau1,tau2,th1,th2);
  
  // probes
  probe("ref_th") = refTh;
  probe("ref_vel") = refVel;
}
def furutaTorqueCascFeedback(Pth : Real, Ith : Real, Dth : Real, Ps : Real, Ds : Real) = {  
  // working variables
  def refTh : Real; def errTh : Real; def IerrTh : Real;
  def refS : Real; def errS : Real; // Speed control of arm1
  def tau1 : Real; // main actuator torque
  def tau2 : Real; // Arm disturbance torque
  def th1 : Real; // Angle of first arm
  def th2 : Real; // Angle of pendulum (0 = straight down)
  def time : Real;
  
  def th2init = 0.9*PI;
  def th2refinit = 1.0*PI;
  
  init th2 th2init; // init angle of pendulum
  init refTh (th2refinit);
  init errTh (th2refinit - th2init);
  
  
  // Time
  time' = 1.0;
  
  // Disturbance torque
  tau2 = 0.0;    
  
//   // angular speed control of arm1 using refTh as input
  refS = 0.0;
  errS = (th1-refS);
  refTh = Ps*errS + Ds*errS' + PI;
  
  // pendulum angle control using refVel as input
//   refTh = th2refinit;
  errTh = (refTh - th2);
  IerrTh' = errTh;
  tau1 = Pth*errTh + Ith*IerrTh + Dth*errTh';

  FurutaEquations(tau1,tau2,th1,th2);
  
  // probes
  probe("ref_th") = refTh;
  probe("errTh") = errTh;
  probe("T") = tau1;
}
def furutaTorqueStateFeedback(ref : Real) = {
  def tau1 : Real; // main actuator torque
  def tau2 : Real; // Arm disturbance torque
  def th1 : Real; // Angle of first arm
  def th2 : Real; // Angle of pendulum (0 = straight down)
  //def th2_zeroed : Real;
  
  // state feedback parameters: states = [th1,th2,th1_dot,th2_dot]
  def L_1 = -3.1623; def L_2 = 24.4243; def L_3 = -1.9141; def L_4 = 4.5449;
  def Nr = -3.1623;
  
  def th2init = 0.9*PI;
  init th2 th2init; // init angle of pendulum
  //init tau1 (L_2*(PI-th2init));
  
  // Input torques torque
  tau2 = 0.0;
  tau1 = -1.0*(L_1*th1 + L_2*(th2-PI) + L_3*th1' + L_4*th2') + Nr*ref;
  
  // Equations
  FurutaEquations(tau1,tau2,th1,th2);
  
  probe("T") = tau1;
}
def furutaVoltageStateFeedback(ref : Real) = {
  def tau1 : Real; // main actuator torque
  def tau2 : Real; // Arm disturbance torque
  def th1 : Real; // Angle of first arm
  def th2 : Real; // Angle of pendulum (0 = straight down)
  def u,i : Real; // Applied voltage and current in motor
  
  def (K,R,L,n,eta) = getMotorParams();
  
  // state feedback parameters: states = [th1,th2,th1_dot,th2_dot]
  def L_1 = -0.1; def L_2 = 20.0; def L_3 = -6.0; def L_4 = 5.0;
  def Nr = -0.1;
  
  def th2init = 0.9*PI;
  def th2_meas_offset = 0.0*PI/180.0; // Error in measurement
  init th2 th2init; // init angle of pendulum
  //init tau1 (L_2*(PI-th2init));
  
  // Input torques torque
  tau2 = 0.0;
  u = -1.0*(L_1*th1 + L_2*(th2-PI-th2_meas_offset) + L_3*th1' + L_4*th2') + Nr*ref;
  
  // dc-motor equations
  u - R*i - L*i' - K*n*th1' = 0.0;
  tau1 = eta*K*n*i;
  
  // Equations
  FurutaEquations(tau1,tau2,th1,th2);
  
  //probe("T") = tau1;
  probe("i") = i;
  probe("u") = u;
}

def furutaSpeedStateFeedback(ref : Real) = {
  def tau1 : Real; // main actuator torque
  def tau2 : Real; // Arm disturbance torque
  def th1 : Signal; // Angle of first arm
  def th2 : Signal; // Angle of pendulum (0 = straight down)
  def u,i,refVel,test : Signal; // Applied voltage and current in motor
  
  def (K,R,L,n,eta) = getMotorParams();
  
  // state feedback parameters: states = [th1,th2,th1_dot,th2_dot]
  def L_1 = -0.3162; def L_2 = 16.8470; def L_3 = -2.1288; def L_4 = 3.2023;
  def Nr = -0.3162;
  
  def th2init = 2.9;//0.9*PI;
  def th2_meas_offset = 0.0*PI/180.0; // Error in measurement
  
  init th2 th2init; // init angle of pendulum
  //init refVel (-1.0*L_2*(th2init-PI));
  
  // State feedback
  refVel = -1.0*(L_1*th1 + L_2*(th2-PI-th2_meas_offset) + L_3*th1' + L_4*th2') + Nr*ref;
  //refVel = 0.01*th2'; // th2' fuks it up
  
  // Speed controller
  PIspeedController(refVel,th1',u);
  
  // Dc-motor equations
  u - R*i - L*i' - K*n*th1' = 0.0;
  tau1 = eta*K*n*i;
  tau2 = 0.0;
  
  // Equations
  FurutaEquations(tau1,tau2,th1,th2);
  
  //probe("T") = tau1;
  probe("vel_ref") = refVel;
  probe("i") = i;
  probe("u") = u;
}


// def main = printsim(PrintFurutaParams(),0.1,0.1)
// def main = printsim(furutaFree((PI/2.0)),0.001,10.0)
// def main = printsim(furutaTorqueCascFeedback(16.0,0.0,4.0,0.0,0.04),0.001,6.0)
// def main = printsim(furutaSpeedCascFeedback(50.0,0.0,10.0,0.0,0.0),0.001,4.0)
// def main = printsim(furutaTorqueStateFeedback(0.0),0.001,4.0)
def main = printsim(furutaVoltageStateFeedback(0.0),0.001,10.0)
// def main = printsim(furutaSpeedStateFeedback(0.0),0.001,10.0)

